# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(entranceYear, major)) ->
list_major1_allYears # 經濟系
entranceYears
majors
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(entranceYears, majors[[1]])) ->
list_major1_allYears # 經濟系
class(majors)
majors[[1]]
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(entranceYears, majors[[1]])) ->
list_major1_allYears # 經濟系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
c(entranceYears,majors) %>%
map(~get_courses(entranceYears, majors[[1]])) ->
list_major1_allYears # 經濟系
c(entranceYears,majors)
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
list(entranceYears,majors) %>%
map(~get_courses(entranceYears, majors[[1]])) ->
list_major1_allYears # 經濟系
get_courses(100,經濟系)
get_courses<-function(entranceYear,majors){
regex1 <- majors
regex2 <- "[1]"
regex3 <- "[2]"
regex4 <- "[3]"
regex5 <- "[4]"
paste0(regex1,regex2)-> pick1
paste0(regex1,regex3)-> pick2
paste0(regex1,regex4)-> pick3
paste0(regex1,regex5)-> pick4
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick2))->pick_courses2
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick3))->pick_courses3
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick4))->pick_courses4
courseStructure$科目名稱[pick_courses1] %>%
unique() -> year1
courseStructure$科目名稱[pick_courses2] %>%
unique() -> year2
courseStructure$科目名稱[pick_courses3] %>%
unique() -> year3
courseStructure$科目名稱[pick_courses4] %>%
unique() -> year4
list(year1,year2,year3,year4)
}
get_courses
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
list(entranceYears,majors) %>%
map(~get_courses(entranceYears, majors[[1]])) ->
list_major1_allYears # 經濟系
get_courses<-function(entranceYear,major){
regex1 <- major
regex2 <- "[1]"
regex3 <- "[2]"
regex4 <- "[3]"
regex5 <- "[4]"
paste0(regex1,regex2)-> pick1
paste0(regex1,regex3)-> pick2
paste0(regex1,regex4)-> pick3
paste0(regex1,regex5)-> pick4
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick2))->pick_courses2
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick3))->pick_courses3
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick4))->pick_courses4
courseStructure$科目名稱[pick_courses1] %>%
unique() -> year1
courseStructure$科目名稱[pick_courses2] %>%
unique() -> year2
courseStructure$科目名稱[pick_courses3] %>%
unique() -> year3
courseStructure$科目名稱[pick_courses4] %>%
unique() -> year4
list(year1,year2,year3,year4)
}
get_courses
major <- c("經濟系","社學系","社工系")
entranceYear <- 100:103
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
c(entranceYear,major) %>%
map(~get_courses(entranceYears, major[[1]])) ->
list_major1_allYears # 經濟系
View(get_courses)
get_courses<-function(entranceYear,major){
regex1 <- major
regex2 <- "[1]"
regex3 <- "[2]"
regex4 <- "[3]"
regex5 <- "[4]"
paste0(regex1,regex2)-> pick1
paste0(regex1,regex3)-> pick2
paste0(regex1,regex4)-> pick3
paste0(regex1,regex5)-> pick4
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick2))->pick_courses2
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick3))->pick_courses3
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick4))->pick_courses4
courseStructure$科目名稱[pick_courses1] %>%
unique() -> year1
courseStructure$科目名稱[pick_courses2] %>%
unique() -> year2
courseStructure$科目名稱[pick_courses3] %>%
unique() -> year3
courseStructure$科目名稱[pick_courses4] %>%
unique() -> year4
list(year1,year2,year3,year4)
}
get_courses
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
c(entranceYear,major) %>%
map(~get_courses(entranceYears, major[[1]])) ->
list_major1_allYears # 經濟系
View(courseStructure)
courseStructure$科目名稱[pick_course1]
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
regex1 <- major
regex2 <- "[1]"
regex3 <- "[2]"
regex4 <- "[3]"
regex5 <- "[4]"
paste0(regex1,regex2)-> pick1
paste0(regex1,regex3)-> pick2
paste0(regex1,regex4)-> pick3
paste0(regex1,regex5)-> pick4
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick2))->pick_courses2
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick3))->pick_courses3
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick4))->pick_courses4
courseStructure$科目名稱[pick_courses1] %>%
unique() -> year1
courseStructure$科目名稱[pick_courses2] %>%
unique() -> year2
courseStructure$科目名稱[pick_courses3] %>%
unique() -> year3
courseStructure$科目名稱[pick_courses4] %>%
unique() -> year4
list(year1,year2,year3,year4)
entranceYear
major
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
c(entranceYears,majors) %>%
map(~get_courses(entranceYears, majors[[1]])) ->
list_major1_allYears # 經濟系
list_major1_allYears
get_courses<-function(entranceYear,major){
regex1 <- major
regex2 <- "[1]"
regex3 <- "[2]"
regex4 <- "[3]"
regex5 <- "[4]"
paste0(regex1,regex2)-> pick1
paste0(regex1,regex3)-> pick2
paste0(regex1,regex4)-> pick3
paste0(regex1,regex5)-> pick4
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick2))->pick_courses2
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick3))->pick_courses3
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick4))->pick_courses4
courseStructure$科目名稱[pick_courses1] %>%
unique() -> year1
courseStructure$科目名稱[pick_courses2] %>%
unique() -> year2
courseStructure$科目名稱[pick_courses3] %>%
unique() -> year3
courseStructure$科目名稱[pick_courses4] %>%
unique() -> year4
}
get_courses
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
c(entranceYears,majors) %>%
map(~get_courses(entranceYears, majors[[1]])) ->
list_major1_allYears # 經濟系
list_major1_allYears
class(list_major1_allYears)
View(list_major1_allYears)
get_courses(100,經濟系)
View(list_major1_allYears)
knitr::opts_chunk$set(echo = F, eval=F)
library(readr); library(stringr); library(purrr); library(magrittr); library(lubridate)
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(entranceYears, majors[[1]])) ->
list_major1_allYears # 經濟系
list_major1_allYears
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社會系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(entranceYears, majors[[2]])) ->
list_major2_allYears # 社會系
list_major2_allYears
pick1
pick2
pick3
pick4
pick_courses1
year1
list_major1_allYears
get_courses<-function(entranceYear,major){
regex1 <- major
regex2 <- "[1]"
regex3 <- "[2]"
#  regex4 <- "[3]"
# regex5 <- "[4]"
paste0(regex1,regex2)-> pick1
paste0(regex1,regex3)-> pick2
# paste0(regex1,regex4)-> pick3
# paste0(regex1,regex5)-> pick4
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick2))->pick_courses2
# (courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick3))->pick_courses3
get_courses<-function(entranceYear,major){
regex1 <- major
regex2 <- "[1]"
regex3 <- "[2]"
#  regex4 <- "[3]"
# regex5 <- "[4]"
paste0(regex1,regex2)-> pick1
paste0(regex1,regex3)-> pick2
# paste0(regex1,regex4)-> pick3
# paste0(regex1,regex5)-> pick4
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick2))->pick_courses2
# (courseStructure$學年==entranceYear &
# str_detect(courseStructure$應修系級,pick3))->pick_courses3
# (courseStructure$學年==entranceYear &
# str_detect(courseStructure$應修系級,pick4))->pick_courses4
courseStructure$科目名稱[pick_courses1] %>%
unique() -> year1
courseStructure$科目名稱[pick_courses2] %>%
unique() -> year2
#  courseStructure$科目名稱[pick_courses3] %>%
#  unique() -> year3
#   courseStructure$科目名稱[pick_courses4] %>%
#   unique() -> year4
}
get_courses
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(entranceYears, majors[[1]])) ->
list_major1_allYears # 經濟系
list_major1_allYears
pick4
ppick_courses1
pick3
pick2
pick1
major <- c("經濟系","社學系","社工系")
entranceYear <- 100:103
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYear %>%
map(~get_courses(entranceYear, major[[1]])) ->
list_major1_allYears # 經濟系
list_major1_allYears
get_courses<-function(entranceYear,major){
regex1 <- major
regex2 <- "[1]"
regex3 <- "[2]"
regex4 <- "[3]"
regex5 <- "[4]"
paste0(regex1,regex2)-> pick1
paste0(regex1,regex3)-> pick2
paste0(regex1,regex4)-> pick3
paste0(regex1,regex5)-> pick4
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick2))->pick_courses2
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick3))->pick_courses3
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick4))->pick_courses4
courseStructure$科目名稱[pick_courses1] %>%
unique() -> year1
courseStructure$科目名稱[pick_courses2] %>%
unique() -> year2
courseStructure$科目名稱[pick_courses3] %>%
unique() -> year3
courseStructure$科目名稱[pick_courses4] %>%
unique() -> year4
}
get_courses
major <- c("經濟系","社學系","社工系")
entranceYear <- 100:103
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYear %>%
map(~get_courses(entranceYear, major[[1]])) ->
list_major1_allYears # 經濟系
list_major1_allYears
class(list_major1_allYears)
typeof(list_major1_allYears)
year4
year3
year3
year2
year1
c(year1,year2,year3,year4)
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYear %>%
map(~get_courses(.x, major[[1]])) ->
list_major1_allYears # 經濟系
list_major1_allYears
get_courses<-function(entranceYear,major){
regex1 <- major
regex2 <- "[1]"
regex3 <- "[2]"
regex4 <- "[3]"
regex5 <- "[4]"
paste0(regex1,regex2)-> pick1
paste0(regex1,regex3)-> pick2
paste0(regex1,regex4)-> pick3
paste0(regex1,regex5)-> pick4
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick1))->pick_courses1
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick2))->pick_courses2
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick3))->pick_courses3
(courseStructure$學年==entranceYear &
str_detect(courseStructure$應修系級,pick4))->pick_courses4
courseStructure$科目名稱[pick_courses1] %>%
unique() -> year1
courseStructure$科目名稱[pick_courses2] %>%
unique() -> year2
courseStructure$科目名稱[pick_courses3] %>%
unique() -> year3
courseStructure$科目名稱[pick_courses4] %>%
unique() -> year4
list(year1,year2,year3,year4)
}
get_courses
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYear %>%
map(~get_courses(.x, major[[1]])) ->
list_major1_allYears # 經濟系
list_major1_allYears
major <- c("經濟系","社學系","社工系")
entranceYear <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYear %>%
map(~get_courses(.x, major[[1]])) ->
list_major1_allYears # 經濟系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社會系100-103入學年學生的系課程規劃科目種類
entranceYear %>%
map(~get_courses(.x, major[[2]])) ->
list_major2_allYears # 社會系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社工系100-103入學年學生的系課程規劃科目種類
entranceYear %>%
map(~get_courses(.x, major[[3]])) ->
list_major3_allYears # 社工系
str(list_major1_allYears)
majors <- c("經濟系","社學系","社工系")
entranceYears <- 100:103
# 三系對100-103學年入學學生的四個年級課程規劃
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得經濟系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[1]])) ->
list_major1_allYears # 經濟系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社會系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[2]])) ->
list_major2_allYears # 社會系
# 針對entranceYears裡每一個元素一一代到get_course函數
# 求得社工系100-103入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, majors[[3]])) ->
list_major3_allYears # 社工系
str(list_major1_allYears)
get_coursesAllYears <- function(entranceYears, major){
# 可以針對「單一」major系對entranceYears裡不同入學年一一求算該系對該入學年學生的系課程規劃科目種類
entranceYears %>%
map(~get_courses(.x, major)) ->
list_major1_allYears
return(list_major1_allYears)
}
# 一一將majors裡的系取出進行get_coursesAllYears運算以得到「取出系」在不同entranceYears入學年下的系課程規劃。
majors %>%
map(~get_coursesAllYears(entranceYears, .x)) -> list_coursesAllMajorsAllYears
list_coursesAllMajorsAllYears
list_major1_allYears
map(list_major1_allYears,~list_major1_allYears.x[[1]])-> year_1
map(list_major1_allYears,~.x[[1]])-> year_1
year_1
class(year_1)
map(list_major1_allYears,~.x[[1]])-> %>%
year1
map(list_major1_allYears,~.x[[1]])-> %>%
map(list_major1_allYears,~.x[[2]])-> %>%
map(list_major1_allYears,~.x[[3]])-> %>%
map(list_major1_allYears,~.x[[4]])-> %>%
list(year_1,year_2,year_3,year_4) -> list_econCourseCounts
list_econCourseCounts
year_1
map(list_major1_allYears,~.x[[2]])-> %>%
map(list_major1_allYears,~.x[[1]])-> %>%
map(list_major1_allYears,~.x[[1]])-> %>%
map(list_major1_allYears,~.x[[1]]) %>%
unlist() -> year_1
map(list_major1_allYears,~.x[[2]]) %>%
unlist() -> year_2
map(list_major1_allYears,~.x[[3]]) %>%
unlist() -> year_3
map(list_major1_allYears,~.x[[4]]) %>%
unlist() -> year_4
list(entranceYear,year_1,year_2,year_3,year_4) -> list_econCourseCounts
list_econCourseCounts
str(list_econCourseCounts)
map(list_major1_allYears,~.x[[1]]) %>%
unlist() -> year_1
map(list_major1_allYears,~.x[[2]]) %>%
unlist() -> year_2
map(list_major1_allYears,~.x[[3]]) %>%
unlist() -> year_3
map(list_major1_allYears,~.x[[4]]) %>%
unlist() -> year_4
list(list(entranceYear),year_1,year_2,year_3,year_4) -> list_econCourseCounts
list_econCourseCounts
sum(year_1)
length(year_1)
year_1
map(list_major1_allYears,~.x[[1]]) -> year_1
year_1
length(year_1)
length(map(year_1,~.x)) -> year_count
year_count
length(map(year_1))
length(map(year_1,~.x))
length(map(year_1,~.x[[1]]))
-> year_count1
c(lengh(year_1[[1]]),lengh(year_1[[2]]),lengh(year_1[[3]]),lengh(year_1[[4]]))-> year_count1
length(year_1[[1]])
c(length(year_1[[1]]),length(year_1[[2]]),length(year_1[[3]]),length(year_1[[4]]))-> year_count1
year_count1
map(list_major1_allYears,~.x[[1]]) -> year_1
c(length(year_1[[1]]),length(year_1[[2]]),length(year_1[[3]]),length(year_1[[4]]))-> year_count1
map(list_major1_allYears,~.x[[2]]) -> year_2
c(length(year_2[[1]]),length(year_2[[2]]),length(year_2[[3]]),length(year_2[[4]]))
-> year_count2
map(list_major1_allYears,~.x[[1]]) -> year_1
c(length(year_1[[1]]),length(year_1[[2]]),length(year_1[[3]]),length(year_1[[4]]))-> year_count1
map(list_major1_allYears,~.x[[2]]) -> year_2
c(length(year_2[[1]]),length(year_2[[2]]),length(year_2[[3]]),length(year_2[[4]]))-> year_count2
map(list_major1_allYears,~.x[[3]]) -> year_3
c(length(year_3[[1]]),length(year_3[[2]]),length(year_3[[3]]),length(year_3[[4]]))-> year_count3
map(list_major1_allYears,~.x[[4]]) -> year_4
c(length(year_4[[1]]),length(year_4[[2]]),length(year_4[[3]]),length(year_4[[4]]))-> year_count4
list(entranceYear,year_count1,year_count2,year_count3,year_count4) -> list_econCourseCounts
list_econCourseCounts
n<- 540
conditionExpression_outcome=
ifelse(n %% 2==0, "even", "odd")
switch(
conditionExpression_outcome,
"even"={fvalue <- n/2}, # 偶數
"odd"=fvalue <- -(n+1)/2, # 奇數；只有一行指令可省略{}
warning("n要整數喔")
)
print(fvalue)
