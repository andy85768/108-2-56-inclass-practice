heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
as.integer(studentHeights$學年度) -> studentHeights$學年度
str_extract(studentHeights$學年度,"^[0-9]{1,3}") -> studentHeights_year
factor(studentHeights$學年度,studentHeights_year) -> studentHeights$學年度
studentHeights$`年齡層` <-factor(studentHeights$`年齡層`,levels=c("6-8","9-12","13-15"))
studentHeights$`年齡層`
studentHeights$年齡層=="6-8" -> pick1
studentHeights$年齡層=="9-12" -> pick2
studentHeights$年齡層=="13-15" -> pick3
studentHeights$平均身高[pick1] -> height_v1
studentHeights$平均身高[pick2] -> height_v2
studentHeights$平均身高[pick3] -> height_v3
mean(height_v1) -> v1
mean(height_v2) -> v2
mean(height_v3) -> v3
c(v1,v2,v3) -> averageHeightByGroup
averageHeightByGroup
studentHeights$類別== "男" -> boy
studentHeights$類別== "女" -> girl
studentHeights$年齡層[boy] == "6-8" -> boy1
studentHeights$年齡層[boy] == "9-12" -> boy2
studentHeights$年齡層[boy] == "13-15" -> boy3
studentHeights$年齡層[girl]== "6-8" -> girl1
studentHeights$年齡層[girl]== "9-12" -> girl2
studentHeights$年齡層[girl]== "13-15" -> girl3
studentHeights$平均身高[boy1] -> boyv1
studentHeights$平均身高[boy2] -> boyv2
studentHeights$平均身高[boy3] -> boyv3
studentHeights$平均身高[girl1] -> girlv1
studentHeights$平均身高[girl2] -> girlv2
studentHeights$平均身高[girl3] -> girlv3
mean(boyv1) -> boy_v1
mean(boyv2) -> boy_v2
mean(boyv3) -> boy_v3
mean(girlv1) -> girl_v1
mean(girlv2) -> girl_v2
mean(girlv3) -> girl_v3
boy_v1-girl_v1 -> gender_v1
boy_v2-girl_v2 -> gender_v2
boy_v3-girl_v3 -> gender_v3
c(gender_v1,gender_v2,gender_v3) -> heightDifferenceByGroup
heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
"不動產?與?城?鄉?環?境?學?系" -> realEstateRegex
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
factor(differentMajors) -> majors
levels(majors) -> currentLevels
currentLevels
class(currentLevels)
"(休閒與運動管理學系|休運系|金融系|金融與合作經營學系|金融與合作學系)" ->bSchoolRegex
bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
"休閒?與?運動?管?理?學?系" -> regex1
"金融與?合?作?經?營?學?系" -> regex2
"經濟學?系" -> regex3
"社會學?系" -> regex4
"社會?工作?學?系" -> regex5
"公共?行政?暨?政?策?學?系" -> regex6
str_replace(differentMajors,regex1,"休運系") -> differentMajors
str_replace(differentMajors,regex2,"金融系") -> differentMajors
str_replace(differentMajors,regex3,"經濟系") -> differentMajors
str_replace(differentMajors,regex4,"社會系") -> differentMajors
str_replace(differentMajors,regex5,"社工系") -> differentMajors
str_replace(differentMajors,regex6,"公行系") -> differentMajors
str_replace(differentMajors,realEstateRegex,"不動系") -> differentMajors
differentMajors
class(differentMajors)
"休閒?與?運動?管?理?學?系" -> regex1
"金融與?合?作?經?營?學?系" -> regex2
"經濟學?系" -> regex3
"社會學?系" -> regex4
"社會?工作?學?系" -> regex5
"公共?行政?暨?政?策?學?系" -> regex6
str_replace(differentMajors,regex1,"休運系") -> differentMajors
str_replace(differentMajors,regex2,"金融系") -> differentMajors
str_replace(differentMajors,regex3,"經濟系") -> differentMajors
str_replace(differentMajors,regex4,"社會系") -> differentMajors
str_replace(differentMajors,regex5,"社工系") -> differentMajors
str_replace(differentMajors,regex6,"公行系") -> differentMajors
str_replace(differentMajors,realEstateRegex,"不動系") -> differentMajors
factor(differentMajors) -> differentMajors
differentMajors
class(differentMajors)
levels(factor(differentMajors)) -> currentMajors
"休運系|金融系" -> bS_regex
"經濟系|社會系|社工系" -> soc_regex
"公行系|不動系" -> pub_regex
str_replace(currentMajors, bS_regex ,"商學院") -> currentMajors
str_replace(currentMajors,soc_regex,"社科院") -> currentMajors
str_replace(currentMajors,pub_regex,"公共事務學院") -> newMajors
newMajors -> school
factor(school) -> school
school
studentHeights$類別== "男" -> boy
studentHeights$類別== "女" -> girl
studentHeights$年齡層[boy] == "6-8" -> boy1
studentHeights$年齡層[boy] == "9-12" -> boy2
studentHeights$年齡層[boy] == "13-15" -> boy3
studentHeights$年齡層[girl]== "6-8" -> girl1
studentHeights$年齡層[girl]== "9-12" -> girl2
studentHeights$年齡層[girl]== "13-15" -> girl3
studentHeights$平均身高[boy1] -> boyv1
studentHeights$平均身高[boy2] -> boyv2
studentHeights$平均身高[boy3] -> boyv3
studentHeights$平均身高[girl1] -> girlv1
studentHeights$平均身高[girl2] -> girlv2
studentHeights$平均身高[girl3] -> girlv3
mean(boyv1) -> boy_v1
mean(boyv2) -> boy_v2
mean(boyv3) -> boy_v3
mean(girlv1) -> girl_v1
mean(girlv2) -> girl_v2
mean(girlv3) -> girl_v3
boy_v1-girl_v1 -> gender_v1
boy_v2-girl_v2 -> gender_v2
boy_v3-girl_v3 -> gender_v3
c(gender_v1,gender_v2,gender_v3) -> heightDifferenceByGroup
heightDifferenceByGroup
studentHeights$類別== "男" -> boy
studentHeights$類別== "女" -> girl
studentHeights$年齡層[boy] == "6-8" -> boy1
studentHeights$年齡層[boy] == "9-12" -> boy2
studentHeights$年齡層[boy] == "13-15" -> boy3
studentHeights$年齡層[girl]== "6-8" -> girl1
studentHeights$年齡層[girl]== "9-12" -> girl2
studentHeights$年齡層[girl]== "13-15" -> girl3
studentHeights$平均身高[boy1] -> boyv1
studentHeights$平均身高[boy2] -> boyv2
studentHeights$平均身高[boy3] -> boyv3
studentHeights$平均身高[girl1] -> girlv1
studentHeights$平均身高[girl2] -> girlv2
studentHeights$平均身高[girl3] -> girlv3
mean(boyv1) -> boy_v1
mean(boyv2) -> boy_v2
mean(boyv3) -> boy_v3
mean(girlv1) -> girl_v1
mean(girlv2) -> girl_v2
mean(girlv3) -> girl_v3
boy_v1-girl_v1 -> gender_v1
boy_v2-girl_v2 -> gender_v2
boy_v3-girl_v3 -> gender_v3
c(gender_v1,gender_v2,gender_v3) -> heightDifferenceByGroup
heightDifferenceByGroup
class(studentHeights$年齡層)
studentHeights$類別
boy
studentHeights$類別== "男" -> boy
studentHeights$類別== "女" -> girl
studentHeights$年齡層[boy] == "6-8" -> boy1
studentHeights$年齡層[boy] == "9-12" -> boy2
studentHeights$年齡層[boy] == "13-15" -> boy3
studentHeights$年齡層[girl]== "6-8" -> girl1
studentHeights$年齡層[girl]== "9-12" -> girl2
studentHeights$年齡層[girl]== "13-15" -> girl3
studentHeights$平均身高[boy1] -> boyv1
studentHeights$平均身高[boy2] -> boyv2
studentHeights$平均身高[boy3] -> boyv3
studentHeights$平均身高[girl1] -> girlv1
studentHeights$平均身高[girl2] -> girlv2
studentHeights$平均身高[girl3] -> girlv3
mean(boyv1) -> boy_v1
mean(boyv2) -> boy_v2
mean(boyv3) -> boy_v3
mean(girlv1) -> girl_v1
mean(girlv2) -> girl_v2
mean(girlv3) -> girl_v3
boy_v1-girl_v1 -> gender_v1
boy_v2-girl_v2 -> gender_v2
boy_v3-girl_v3 -> gender_v3
c(gender_v1,gender_v2,gender_v3) -> heightDifferenceByGroup
heightDifferenceByGroup
boy_v1
girl_v1
boy_v1-girl_v1
boyv1
girlv1
boy1
girl1
studentHeights$類別[girl1]
studentHeights$類別[boy1]
class
class(studentHeights)
str_extract_all?
?str_extract_all
?str_extract_all
View(studentHeights)
str_extract_all(studentHeights,"男") -> boy
boy
studentHeights$類別== "男" -> boy
jsonlite::fromJSON("https://www.dropbox.com/s/es19f62rijrd8i7/studentHeight.json?dl=1") -> studentHeights
View(studentHeights)
as.integer(studentHeights$學年度) -> studentHeights$學年度
str_extract(studentHeights$學年度,"^[0-9]{1,3}") -> studentHeights_year
factor(studentHeights$學年度,studentHeights_year) -> studentHeights$學年度
studentHeights$`年齡層` <-factor(studentHeights$`年齡層`,levels=c("6-8","9-12","13-15"))
studentHeights$`年齡層`
studentHeights$年齡層=="6-8" -> pick1
studentHeights$年齡層=="9-12" -> pick2
studentHeights$年齡層=="13-15" -> pick3
studentHeights$平均身高[pick1] -> height_v1
studentHeights$平均身高[pick2] -> height_v2
studentHeights$平均身高[pick3] -> height_v3
mean(height_v1) -> v1
mean(height_v2) -> v2
mean(height_v3) -> v3
c(v1,v2,v3) -> averageHeightByGroup
averageHeightByGroup
studentHeights$類別== "男" -> boy
studentHeights$類別== "女" -> girl
studentHeights$年齡層[boy] == "6-8" -> boy1
studentHeights$年齡層[boy] == "9-12" -> boy2
studentHeights$年齡層[boy] == "13-15" -> boy3
studentHeights$年齡層[girl]== "6-8" -> girl1
studentHeights$年齡層[girl]== "9-12" -> girl2
studentHeights$年齡層[girl]== "13-15" -> girl3
studentHeights$平均身高[boy1] -> boyv1
studentHeights$平均身高[boy2] -> boyv2
studentHeights$平均身高[boy3] -> boyv3
studentHeights$平均身高[girl1] -> girlv1
studentHeights$平均身高[girl2] -> girlv2
studentHeights$平均身高[girl3] -> girlv3
mean(boyv1) -> boy_v1
mean(boyv2) -> boy_v2
mean(boyv3) -> boy_v3
mean(girlv1) -> girl_v1
mean(girlv2) -> girl_v2
mean(girlv3) -> girl_v3
boy_v1-girl_v1 -> gender_v1
boy_v2-girl_v2 -> gender_v2
boy_v3-girl_v3 -> gender_v3
c(gender_v1,gender_v2,gender_v3) -> heightDifferenceByGroup
heightDifferenceByGroup
jsonlite::fromJSON("https://www.dropbox.com/s/bp0w8tjgrhi79x7/sameMajorDifferentWritings.json?dl=1") -> differentMajors
"不動產?與?城?鄉?環?境?學?系" -> realEstateRegex
realEstateRegex
str_replace(differentMajors,realEstateRegex,"不動系")
factor(differentMajors) -> majors
levels(majors) -> currentLevels
currentLevels
"(休閒與運動管理學系|休運系|金融系|金融與合作經營學系|金融與合作學系)" ->bSchoolRegex
bSchoolRegex
"(休閒與運動管理學系|休運系|金融系|金融與合作經營學系|金融與合作學系)" ->bSchoolRegex
bSchoolRegex
str_replace(currentLevels,bSchoolRegex,"商學院")
"休閒?與?運動?管?理?學?系" -> regex1
"金融與?合?作?經?營?學?系" -> regex2
"經濟學?系" -> regex3
"社會學?系" -> regex4
"社會?工作?學?系" -> regex5
"公共?行政?暨?政?策?學?系" -> regex6
str_replace(differentMajors,regex1,"休運系") -> differentMajors
str_replace(differentMajors,regex2,"金融系") -> differentMajors
str_replace(differentMajors,regex3,"經濟系") -> differentMajors
str_replace(differentMajors,regex4,"社會系") -> differentMajors
str_replace(differentMajors,regex5,"社工系") -> differentMajors
str_replace(differentMajors,regex6,"公行系") -> differentMajors
str_replace(differentMajors,realEstateRegex,"不動系") -> differentMajors
factor(differentMajors) -> differentMajors
differentMajors
levels(factor(differentMajors)) -> currentMajors
"休運系|金融系" -> bS_regex
"經濟系|社會系|社工系" -> soc_regex
"公行系|不動系" -> pub_regex
str_replace(currentMajors, bS_regex ,"商學院") -> currentMajors
str_replace(currentMajors,soc_regex,"社科院") -> currentMajors
str_replace(currentMajors,pub_regex,"公共事務學院") -> newMajors
newMajors -> school
factor(school) -> school
school
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr)
fromJSON("https://data.ntpc.gov.tw/od/data/api/CB6C96C8-D514-42EA-8591-0F4447E79C91?$format=json") -> badEmployers
jsonlite::fromJSON("https://data.ntpc.gov.tw/api/datasets/A3408B16-7B28-4FA5-9834-D147AAE909BF/json") -> badEmployers
factor(badEmployers$law)-> badEmployers$law
levels(badEmployers$law)-> violatedArticles
# violatedArticles
factor(badEmployers$law)-> badEmployers$law
levels(badEmployers$law)-> violatedArticles
violatedArticles
factor(badEmployers$law)-> badEmployers$law
levels(badEmployers$law)-> violatedArticles
violatedArticles
factor(badEmployers$law)
factor(badEmployers$law)-> badEmployers$law
levels(badEmployers$law)-> violatedArticles
violatedArticles
library(purrr)
install.packages(purrr)
library(purrr)
install.packages(purrr)
install.packages("purrr")
forcats::fct_c(factor1, factor2)
library(purrr)
example <- list(
name=c("小明","小花","小新","美美"),
height=c(175,166,170,160),
weight=c(77,NA,60,43),
birthday=lubridate::ymd(c("1998-03-11","1999-12-22","1995-08-22","2001-10-10")),
hobby=c("美食 旅遊","旅遊 時尚","3C 美食","音樂 旅遊"),
residence=c("Taipei","New Taipei","Taichung","Kaohsiung"),
allowance=factor(c("0-1000","1001-2000","2000+","1001-2000")),
bloodType=c("A","B","B","O")
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
pick_小新 <- example$name == "小新"
data_selected <-
list(
name=example$name[pick_小新],
weight=example$weight[pick_小新],
height=example$height[pick_小新],
hobby=example$hobby[pick_小新],
residence=example$residence[pick_小新],
allowance=example$allowance[pick_小新],
bloodType=example$bloodType[pick_小新]
)
map(example, ~.x[pick_小新]) ->
data_selected
data_selected
jsonlite::fromJSON("https://www.dropbox.com/s/6252gbdnv9owljm/dance.json?dl=1", simplifyDataFrame = F) -> dance
# 第一個dance表演名稱
dance[[1]]$title
# 第二個dance表演名稱
dance[[2]]$title
map(dance, ~.x$title) ->
list_titles
View(list_titles)
list_titles
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
# 記載第一個表演的所有場次訊息
dance[[1]]$showInfo
str(dance[[1]]$showInfo)
# 計算第一個表演有幾個場次
length(dance[[1]]$showInfo)
# 計算第二個表演有幾個場次
length(dance[[2]]$showInfo)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
str(dance[[4]]$showInfo)
# 這個表演第1個場次的訊息
dance[[4]]$showInfo[[1]]$time
# 這個表演第2個場次的訊息
dance[[4]]$showInfo[[2]]$time
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
map(dance[[4]]$showInfo, ~ .x$time) ->
list_showTimes_dance4
list_showTimes_dance4
map(dance[[8]]$showInfo,~.x$time) -> time_8
map(dance[[8]]$showInfo,~.x$location) ->location_8
c(time_8,location_8) -> "8"
"8"
map(dance[[8]]$showInfo,~.x$time) -> time_8
map(dance[[8]]$showInfo,~.x$location) ->location_8
c(time_8,location_8)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
map(dance, ~.x$title) ->
list_titles
list_titles
View(list_titles)
map(dance,~length(.x$showInfo)) ->
list_numberOfShows
View(list_numberOfShows)
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
library(magrittr)
install.packages("magrittr")
library(purrr)
library(magrittr)
sort(threeHeigths, decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
f(w) -> x
# 由cities創出每個元素對應的北部、東部、中部region factor
cities <- factor(c("台北","花蓮","台東","台中"))
levels(cities)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
library(stringr)
region <- cities
# 以下為一連串的pipe operation
levels(region) -> currentLevels
str_replace(currentLevels,"台北","北部") -> currentLevels1
str_replace(currentLevels1,"花蓮|台東","東部") -> currentLevels2
str_replace(currentLevels2,"台中","中部") -> regionLevels
regionLevels -> levels(region)
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
num <- c(2,97,22,15,7)
# 選出大於50的數字
(num > 50) -> pick_big
num[pick_big]
(num > 50) %>%
num[.]
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeigths <- c(Gary=178, John=182, Cam=175)
# 先排序由大到小，
sort(threeHeigths, decreasing=T) -> sorted_heights
# 把排好的人名取出
names(sorted_heights) -> sorted_persons
# 接著取出第一個位置的人名
sorted_persons[[1]] -> highestPerson
names(sort(threeHeigths, decreasing = T))[[1]] -> highestPerson
threeHeights %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
threeHeigths %>%
.sort(., decreasing=T) %>%
names(.) %>%
.[[1]] -> highestPerson
levels(region) %>%
str_replace(.,"台北","北部") %>%
str_replace(.,"花蓮|台東","東部") %>%
str_replace(.,"台中","中部") ->
levels(region)
levels(region) %>%
str_replace("台北","北部") %>%
str_replace("花蓮|台東","東部") %>%
str_replace("台中","中部") ->
levels(region)
# 資料
population <- c(`cityA`=500,`cityB`=1500, `cityC`=399)
cities <- c("cityA","cityA","cityB","cityB","cityC")
# 分析步驟
names(sort(population)) -> setLevels
factor(cities, levels = setLevels) -> cities
population %>%
names(sort(.)) %>%
factor(cities, levels=.) -> cities
population %>% names(sort(.))
population %>%
sort() %>%
names() %>%
factor(cities, levels=.) -> cities
dataList <- list(
num=c(2,97,22,15,7),
chr=c("2","97","22","15","7")
)
map(dataList, is.numeric) -> results
unlist(results) -> pick_numeric
dataList[pick_numeric] -> num_element
(num_element[[1]] > 50) -> pick_big
num_element[[1]][pick_big] -> bigNumber
map(dataList, is.numeric) %>%
unlist(.) %>%
dataList[.] %>%
{(.[[1]] > 50)} %>%
num_element[[1]][.] -> bigNumber
