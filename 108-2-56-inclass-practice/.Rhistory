# 是否有吻合的出象
str_detect(
c(claimA,claimB,claimC),
pattern=myRegexSlotMachine
)
headline <- "資科系的謝陳官乃飛鳶書院三大名師，其中謝無雙的策略運算，陳大器的數理資科學，及官求敗的運算成本更是打通演算思維任督二脈的三大好課。書院目前有陳一、陳二、陳三四這三名學生。"
# 顯示所有符合規則的
str_view_all(headline, "謝陳官") # 固定字組
str_count(headline,"謝陳官")
str_view_all(headline, "[謝陳官]") # 有1個strip: 出象有3個可能字元
str_count(headline, "[謝陳官]")
str_view_all(headline, "謝無雙|官求敗") # 有1個strip，出象有2個字組
str_count(headline, "謝無雙|官求敗")
str_view_all(headline, "陳[^官]") # 固定字元＋有1個strip： 出象為排官的字元
str_count(headline, "陳[^官]")
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
strip1 <- strip2 <- strip3 <- "[0-9]"
strip4 <- "號"
myRegexSlotMachine <- paste0(strip1,strip2,strip3,strip4)
print(myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓',
'新竹市北區竹光路99號',
'金門縣金城鎮賢庵里山前33號',
'臺中市南屯區工業區二十四路23號1樓')
myRegexSlotMachine <- "[0-9]+號"
print(myRegexSlotMachine)
str_view_all(addresses,myRegexSlotMachine)
str_extract(addresses,myRegexSlotMachine)
str_view_all(addresses,"[0-9]+") # 樓號也會選到
phrase <- c("唧唧复唧唧")
# 目標是前面的唧唧
target_regex <- "唧唧"
pattern <- glue::glue("^{target_regex}")
print(pattern)
str_view(phrase, pattern)
# 目標是後面的唧唧
target_regex2 <- "唧唧"
pattern <- glue::glue("{target_regex2}$")
print(pattern)
str_view(phrase, pattern)
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
addresses <- c(
'臺中市后里區公館里尾社路385號',
'新竹市東區科學園路125號1樓'
)
str_extract(addresses,"[0-9]+(?=號)")
str_extract_all(
"我的名字8293叫17380小abce明",
"[\u4E00-\u9FFF]+")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
glue("(?!弟)") -> back_regex
library(glue)
glue("(?!弟)") -> back_regex
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
View(semiGodsSemiDevils)
View(semiGodsSemiDevils)
str
strsemiGodsSemiDevils)
str_extract_all(semiGodsSemiDevils,[P2])
str_extract_all(semiGodsSemiDevils,"[P2]")
semiGodsSemiDevils$data$section[P2]
semiGodsSemiDevils$data -> semi_pick
textExample <- c("段1......。　　段2....。")
str_detect(semiGodsSemiDevils,"P2")
str_detect(semiGodsSemiDevils,"P2")
str_view_all(semiGodsSemiDevils,"P2")
library(htmltools)
str_view_all(semiGodsSemiDevils,"P2")
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
"(?!弟)" -> back_regex
back_regex
class(back_regex)
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
str_extract_all(semiGodsSemiDevils,["P2"]) -> ASDFGHH
context_picked <- str_extract_all(semiGodsSemiDevils,"P2")
context_picked <- str_extract_all(semiGodsSemiDevils$data[1],"P2")
# context_picked
context_picked <- str_extract_all(semiGodsSemiDevils$data,"P2")
# context_picked
context_picked <- str_extract_all(semiGodsSemiDevils$data,"(P2)")
context_picked <- str_extract_all(semiGodsSemiDevils$data$section,"(P2)")
# context_picked
context_picked
context_picked <- str_extract(semiGodsSemiDevils$data$section,"(P2)")
# context_picked
context_picked <- str_extract(semiGodsSemiDevils$data$section,"(P2)")
context_picked
context_picked <- str_extract(semiGodsSemiDevils$section,"(P2)")
context_picked
str_extract_all(semiGodsSemiDevils$data$section,"P2") -> context_picked
# context_picked
context_picked
class(context_picked)
str_extract(semiGodsSemiDevils$data$section,"P2") -> context_picked
# context_picked
class(context_picked)
context_picked
str_extract(semiGodsSemiDevils,"P2") -> context_picked
# context_picked
str_extract(semiGodsSemiDevils$data,"P2") -> context_picked
# context_picked
str_extract(semiGodsSemiDevils$data$section$text,"P2") -> context_picked
# context_picked
context_picked
str_extract(semiGodsSemiDevils$data$section$text,"P2") -> context_picked
# context_picked
semiGodsSemiDevils$data$section$text -> semi_pick
semiGodsSemiDevils$data -> semi_pick
View(semi_pick)
semi_pick$section == "P2" -> pick
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
"(?!弟)" -> back_regex
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
textExample <- c("段1......。　　段2....。")
?unlist
str_extract(semiGodsSemiDevils,"P2") -> context_picked
context_picked
str(semiGodsSemiDevils)
str_extract(semiGodsSemiDevils$data[1][2],"P2") -> context_picked
context_picked
semiGodsSemiDevils$data[1][2] -> semi_pick
semiGodsSemiDevils$data -> semi
semi[1] -> semi_pick
semi[2] -> semi_pick
semi$section -> semi_pick
class(semi)
str(semi)
str_extract(semi,"P2") -> context_picked
context_picked
str_extract(as.character(semi),"P2") -> context_picked
context_picked
str_view_all(as.character(semi),"P2") -> context_picked
context_picked
str_extract(as.character(semi),"P2") -> semi_pick
semi_pick
str_extract_all(as.character(semi),"P2") -> semi_pick
context_picked
semi_pick
textExample <- c("段1......。　　段2....。")
str(semiGodsSemiDevils)
semiGodsSemiDevils$data -> semi
class(semi)
data
class(data)
semi$section
str(semi)
semiGodsSemiDevils$data -> semi
str_detect(semi[[1]]$section,"P2") ->semi_pick
str_extract(semi[[1]]$text,semi_pick) -> context_picked
semi[[1]]$section
semi_pick
semiGodsSemiDevils$data -> semi
str_detect(semi[[1]]$section,"P2") -> semi_pick
text_pick     <-semi[[1]]$text <- semi_pick
names(text_pick) -> context_picked
context_picked
str_detect(semi[[1]]$section,"P2") -> semi_pick
text_pick
names(text_pick) -> context_picked
semiGodsSemiDevils$data -> semi
str_detect(semi[[1]]$section,"P2") -> semi_pick
text_pick     <-semi[[1]]$text <- semi_pick
names(text_pick) -> context_picked
context_picked
semi[[1]]$text
names(semi[[1]]$text)
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
semiGodsSemiDevils$data[[1]]$section == "P2" -> semi
semiGodsSemiDevils$data[[1]]$text[semi] -> context_picked
context_picked
semi
str(context_picked)
textExample <- c("段1......。　　段2....。")
textExample <- c("段1......。　　段2....。")
space <- c("\\s","\\s")
str_split(context_picked,space)
context_picked_split
space <- c("\\s","\\s")
str_split(context_picked,space) -> context_picked_split
context_picked_split
str(context_picked_split)
space <- "\\s"
str_split(context_picked,space) -> context_picked_split
context_picked_split
str(context_picked_split)
semiGodsSemiDevils$data[[1]]$section == "P2" -> semi
semiGodsSemiDevils$data[[1]]$text[semi] -> context_picked
context_picked
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
"(?!弟)" -> back_regex
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils$data[[1]]$section == "P2" -> semi
semiGodsSemiDevils$data[[1]][semi]$text -> context_picked
context_picked
semiGodsSemiDevils$data[[1]]$section == "P2" -> semi
semiGodsSemiDevils$data[[1]]$text[semi] -> context_picked
context_picked
textExample <- c("段1......。　　段2....。")
space <- "\\s"
str_split(context_picked,space) -> context_picked_split
context_picked_split
space <- c("\\s","\\s")
str_split(context_picked,space) -> context_picked_split
context_picked_split
str(context_picked_split)
str_split(context_picked,["\\s""\\s"]) -> context_picked_split
str_split(context_picked,"\\s""\\s") -> context_picked_split
str_split(context_picked,("\\s""\\s")) -> context_picked_split
semiGodsSemiDevils$data[[1]]$section == "P2" -> semi
semiGodsSemiDevils$data[[1]]$text[semi] -> context_picked
context_picked
two_space <- c("\\s","\\s")
str_split(context_picked,two_space) -> context_picked_split
context_picked_split
two_space <- c("\\s\\s")
str_split(context_picked,two_space) -> context_picked_split
context_picked_split
str(context_picked_split)
strip1 <- "段譽"
strip2 <- "段兄"
strip3 <- "段兄弟"
strip4 <- "段大哥"
strip5 <- "段相公"
strip6 <- "段君"
strip7 <- "姓段的小子"
paste0(strip1,strip2,strip3,strip4,strip5,strip6,strip7) -> duan_pick
str_extract_all(context_picked_split,duan_pick) -> mention_duan
mention_duan
class(duan_pick)
class(context_picked_split)
strip1 <- "段譽"
strip2 <- "段兄"
strip3 <- "段兄弟"
strip4 <- "段大哥"
strip5 <- "段相公"
strip6 <- "段君"
strip7 <- "姓段的小子"
paste0(strip1,strip2,strip3,strip4,strip5,strip6,strip7) -> duan_pick
str_extract_all(context_picked_split[[1]],duan_pick) -> mention_duan
mention_duan
duan_pick
c("段譽"|"段兄"|"段兄弟"|"段大哥"|"段相公"|"段君"|"姓段的小子") -> duan_pick
mention_duan
mention_duan
str_extract_all(context_picked_split[[2]],"段譽"|"段兄"|"段兄弟"|"段大哥"|"段相公"|"段君"|"姓段的小子") -> mention_duan
str_extract_all(context_picked_split[[1]],"段") -> mention_duan
mention_duan
str_extract_all(context_picked_split[[1]],"段譽"|"段兄"|"段兄弟"|"段大哥"|"段相公"|"段君"|"姓段的小子") -> mention_duan
str_extract_all(context_picked_split[[1]],"段"?) -> mention_duan
str_extract_all(context_picked_split[[1]],"段") -> mention_duan
mention_duan
class(mention_duan)
duan_pick1 <- "段(譽|兄|兄弟|大哥|相公|君)"
duan_pick2 <- "姓段的小子"
duan_pick <- duan_pick1|duan_pick2
duan_pick1 <- "段(譽|兄|兄弟|大哥|相公|君)"
duan_pick2 <- "姓段的小子"
duan_pick <- c(duan_pick1,duan_pick2)
str_extract_all(context_picked_split[[1]],duan_pick) -> mention_duan
mention_duan
class(mention_duan)
?unlist
unlist(mention_duan)
unlist(mention_duan) ->duan
table(duan) ->table_duan
table_duan
knitr::opts_chunk$set(echo = F, eval=F)
library(jsonlite); library(lubridate); library(readr); library(stringr);
twoNames <- "有人叫他段兄，但也有有人叫他段兄弟，最常...."
str_extract_all(twoNames, "段(兄|兄弟)")
"(?!弟)" -> back_regex
back_regex
pattern <- paste0("段(兄|兄弟)",back_regex)
str_extract_all(twoNames, pattern)
jsonlite::fromJSON("https://www.dropbox.com/s/kv0xa0spa6q5l7q/semiGodsSemiDevils.json?dl=1") -> semiGodsSemiDevils
semiGodsSemiDevils$data[[1]]$section == "P2" -> semi
semiGodsSemiDevils$data[[1]]$text[semi] -> context_picked
context_picked
textExample <- c("段1......。　　段2....。")
textExample <- c("段1......。　　段2....。")
two_space <- c("\\s\\s")
str_split(context_picked,two_space) -> context_picked_split
context_picked_split
duan_pick1 <- "段(譽|兄|兄弟|大哥|相公|君)"
duan_pick2 <- "姓段的小子"
duan_pick <- c(duan_pick1,duan_pick2)
str_extract_all(context_picked_split[[1]],duan_pick) -> mention_duan
mention_duan
unlist(mention_duan) ->duan
table(duan) ->table_duan
table_duan
knitr::opts_chunk$set(echo = TRUE)
char1 <- c("Wild","Apple","Donald","May","Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
library(stringr)
char2 <- c("蔡英文","習近平","Donald Trump","蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(
str_sub(char2,1,1)
)
sort(
str_sub(char2,2,2)
)
Sys.getlocale("LC_COLLATE")
jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json") -> covid19
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 不可排序類別：性別、縣市、是否境外移入
covid19$縣市 <-
factor(covid19$縣市)
covid19$性別 <-
factor(covid19$性別)
covid19$是否為境外移入 <-
factor(
covid19$是否為境外移入
)
# 可排序類別資料：年齡層
covid19$年齡層 <-
factor(
covid19$年齡層,
ordered=TRUE
)
levels(covid19$縣市)
levels(covid19$性別)
levels(covid19$是否為境外移入)
covid19$年齡層
levels(covid19$年齡層)
levels(covid19$性別)
covid19$性別 <- factor(covid19$性別, c("男","女"))
jsonlite::fromJSON(
"https://www.dropbox.com/s/jckqryeh5zeat5w/regionPopulation.json?dl=1"
) -> population
unlist(population) -> population
print(population)
class(population) # 判斷出是named integer vector
names(population) # 元素名稱是台灣各縣市
levels(covid19$縣市) # 是名稱字串向量
# 由於population元素值有names，可以用`[名稱字串向量]`取出所要的
levels(covid19$縣市) -> levelsInData
population[levelsInData] -> population
population <- sort(population, decreasing=T)
population
newLevels <- names(population)
newLevels
covid19$縣市 <-
factor(
covid19$縣市, levels=newLevels
)
levels(covid19$縣市)
levels(covid19$年齡層)
level_names <- levels(covid19$年齡層)
startingAges <- stringr::str_extract(
level_names,
"^[0-9]+" # regex：開頭的一串數字
)
# 要numerical class排的才一定對
startingAges <- as.integer(startingAges)
names(startingAges) <- level_names
sort(startingAges) -> startingAges
covid19$年齡層 <-
factor(
covid19$年齡層, names(startingAges)
)
levels(covid19$年齡層)
factor1 <- factor(
c("A","A","C","A","D","F","D","D")
)
factor1
levels(factor1) <- c("優","佳","尚可","普")
factor1
levels(factor1)[[1]] <- "Excellent"
levels(factor1)[c(3,4)] <- c("C","D")
factor1
factor1 <- factor(c("新北市","台北市","台中市","彰化市","基隆市","苗栗縣","苗栗縣"))
factor1
levels(factor1) <- c("中部","北部","北部","中部","北部","中部")
factor1
factor1 <- factor(c("0-4歲","5-9歲","10歲以上","0-4歲","5-9歲","5-9歲","10歲以上"))
factor1
levels(factor1) <- c("0-9歲","10歲以上","0-9歲")
factor1
covid19$地區 <- covid19$縣市
levels(covid19$地區)
currentLevels <- levels(covid19$地區)
# 整併
north_regex <- "宜蘭縣|基隆市|[台臺]北市|新北市|桃園市|新竹市|新竹縣"
middle_regex <- "苗栗縣|[台臺]中市|彰化縣|南投縣|雲林縣"
south_regex <-
"嘉義市|嘉義縣|[台臺]南[縣市]|高雄市|屏東縣|澎湖縣"
east_regex <- "花蓮縣|台東縣"
currentLevels <- str_replace(currentLevels,
north_regex, "北部")
currentLevels <- str_replace(currentLevels,
middle_regex, "中部")
currentLevels <- str_replace(currentLevels,
south_regex, "南部")
newLevels <- str_replace(currentLevels,
east_regex, "東部")
levels(covid19$地區) <- newLevels
covid19$地區
levels(covid19$年齡層)
# 創造10歲間距的所有可能
start <- seq(5, 55, by=10) # 由5到55，每個值差10的數值向量
end <- seq(14, 64, by=10)
middleLevels <-
rep(
paste0(start,"-",end),
each=2) # 每個新間距要2個
newLevels <- c("4", middleLevels, "65+", "65+")
levels(covid19$年齡層) <- newLevels
covid19$年齡層
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
factor2[[6]] <- "差"
factor2 # 元素6變NA
factor2 <-
factor(c("好","好","普通","普通", "好"))
levels(factor2)
# 先擴大levels
levels(factor2) <- c(levels(factor2), "差")
levels(factor2)
factor2[[6]] <- "差"
factor2
# non factor
char1 <- c("小明","小美")
char2 <- c("大雄","技安")
c(char1, char2)
# factor
factor1 <- factor(c("好", "壞", "壞"))
factor2 <- factor(c("壞", "好", "好"))
c(factor1, factor2)
factor1[4:6] <- factor2
factor1
forcats::fct_c(factor1, factor2)
